---
description: How to create custom hooks
globs: 
alwaysApply: false
---
# Custom Hooks Design and Organization Rules

## File Structure

```
src/
└── hooks/
    ├── useAuth.hooks.ts              // Authentication state and logic
    ├── useApi.hooks.ts               // API data fetching hooks
    ├── useLocalStorage.hooks.ts      // Local storage management
    ├── useDebounce.hooks.ts          // Debouncing utilities
    ├── useForm.hooks.ts              // Form state management
    ├── useToggle.hooks.ts            // Boolean state toggles
    ├── useCounter.hooks.ts           // Counter state management
    ├── useWindowSize.hooks.ts        // Window size tracking
    ├── useTheme.hooks.tsx            // Theme management with components
    ├── useToast.hooks.tsx            // Toast notifications with components
    ├── useModal.hooks.tsx            // Modal management with components
    └── useConfirmDialog.hooks.tsx    // Confirmation dialogs with components
```

## Cursor Rules

### 1. Rule - Hook File Location and Naming
- **Always place custom hooks in `./src/hooks` folder**
- **File names must suffix with `.hooks.ts` for pure logic hooks**
- **File names must suffix with `.hooks.tsx` when using React components/JSX**
- **Function names must prefix with `use` (e.g., `useAuth`, `useLocalStorage`)**
- **Use camelCase for hook function names** (e.g., `useFormValidation`, `useApiCall`)

### 2. Rule - Hook File Type Selection
- **Use `.hooks.ts`** for hooks with pure logic, state management, data fetching
- **Use `.hooks.tsx`** when hooks return or manage React components, JSX elements
- **Import React hooks** (useState, useEffect, etc.) from 'react'
- Always use TypeScript for type safety and better developer experience

### 3. Rule - Hook Function Standards
- **Always start function names with `use`** prefix
- **Use camelCase naming convention** for all hook functions
- **Export hooks with named exports** (avoid default exports)
- **Add JSDoc comments** for complex hooks
- **Follow React hooks rules** (only call at top level, only call from React functions)

### 4. Rule - Hook Structure and Organization
- **Group related hooks** in the same file when they share logic
- **Keep hooks focused** on single responsibility
- **Use proper TypeScript typing** for parameters and return values
- **Handle loading states** and errors appropriately
- **Return consistent object structures** from hooks

### 5. Rule - Hook Import and Usage
- **Import hooks using `@/hooks/filename.hooks`** pattern
- **Use named imports** for specific hook functions
- **Follow React hooks rules** in components using custom hooks
- **Handle hook return values** properly in components

### 6. Rule - Hook Dependencies and Effects
- **Use proper dependency arrays** in useEffect
- **Clean up effects** when necessary (timers, subscriptions)
- **Memoize expensive calculations** with useMemo
- **Use useCallback** for function memoization when needed

## Examples

### ✅ Good Hook Structure (Pure Logic)

```typescript
// ./src/hooks/useAuth.hooks.ts
import { useState, useEffect, useCallback } from 'react';
import type { IUserInterface } from '@/types/IUserInterface';
import { UserRole } from '@/enums/user.enum';

/**
 * Authentication hook for managing user state and auth operations
 */
export const useAuth = () => {
  const [user, setUser] = useState<IUserInterface | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  /**
   * Login user with email and password
   */
  const login = useCallback(async (email: string, password: string) => {
    try {
      setIsLoading(true);
      setError(null);
      
      const response = await fetch('/api/auth/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, password }),
      });

      if (!response.ok) {
        throw new Error('Login failed');
      }

      const userData = await response.json();
      setUser(userData);
      localStorage.setItem('auth_token', userData.token);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Login failed');
    } finally {
      setIsLoading(false);
    }
  }, []);

  /**
   * Logout current user
   */
  const logout = useCallback(() => {
    setUser(null);
    localStorage.removeItem('auth_token');
  }, []);

  /**
   * Check if user has specific role
   */
  const hasRole = useCallback((role: UserRole): boolean => {
    return user?.role === role;
  }, [user?.role]);

  /**
   * Check authentication status on mount
   */
  useEffect(() => {
    const checkAuth = async () => {
      try {
        const token = localStorage.getItem('auth_token');
        if (!token) {
          setIsLoading(false);
          return;
        }

        const response = await fetch('/api/auth/verify', {
          headers: { Authorization: `Bearer ${token}` },
        });

        if (response.ok) {
          const userData = await response.json();
          setUser(userData);
        } else {
          localStorage.removeItem('auth_token');
        }
      } catch (err) {
        console.error('Auth check failed:', err);
      } finally {
        setIsLoading(false);
      }
    };

    checkAuth();
  }, []);

  return {
    user,
    isLoading,
    error,
    isAuthenticated: !!user,
    login,
    logout,
    hasRole,
  };
};
```

### ✅ Data Fetching Hook

```typescript
// ./src/hooks/useApi.hooks.ts
import { useState, useEffect, useCallback } from 'react';

interface UseApiOptions {
  immediate?: boolean;
  onSuccess?: (data: any) => void;
  onError?: (error: string) => void;
}

interface UseApiReturn<T> {
  data: T | null;
  isLoading: boolean;
  error: string | null;
  execute: () => Promise<void>;
  reset: () => void;
}

/**
 * Generic API data fetching hook
 */
export const useApi = <T = any>(
  url: string,
  options: UseApiOptions = {}
): UseApiReturn<T> => {
  const { immediate = false, onSuccess, onError } = options;
  
  const [data, setData] = useState<T | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const execute = useCallback(async () => {
    try {
      setIsLoading(true);
      setError(null);

      const response = await fetch(url);
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const result = await response.json();
      setData(result);
      onSuccess?.(result);
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'An error occurred';
      setError(errorMessage);
      onError?.(errorMessage);
    } finally {
      setIsLoading(false);
    }
  }, [url, onSuccess, onError]);

  const reset = useCallback(() => {
    setData(null);
    setError(null);
    setIsLoading(false);
  }, []);

  useEffect(() => {
    if (immediate) {
      execute();
    }
  }, [immediate, execute]);

  return { data, isLoading, error, execute, reset };
};

/**
 * Hook for posting data to API
 */
export const useApiPost = <T = any, D = any>(url: string) => {
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const post = useCallback(async (data: D): Promise<T | null> => {
    try {
      setIsLoading(true);
      setError(null);

      const response = await fetch(url, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      return await response.json();
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'An error occurred';
      setError(errorMessage);
      return null;
    } finally {
      setIsLoading(false);
    }
  }, [url]);

  return { post, isLoading, error };
};
```

### ✅ Local Storage Hook

```typescript
// ./src/hooks/useLocalStorage.hooks.ts
import { useState, useEffect, useCallback } from 'react';

/**
 * Hook for managing localStorage with state synchronization
 */
export const useLocalStorage = <T>(key: string, initialValue: T) => {
  // Get initial value from localStorage or use provided initial value
  const [storedValue, setStoredValue] = useState<T>(() => {
    try {
      const item = window.localStorage.getItem(key);
      return item ? JSON.parse(item) : initialValue;
    } catch (error) {
      console.error(`Error reading localStorage key "${key}":`, error);
      return initialValue;
    }
  });

  // Set value in localStorage and state
  const setValue = useCallback((value: T | ((val: T) => T)) => {
    try {
      const valueToStore = value instanceof Function ? value(storedValue) : value;
      setStoredValue(valueToStore);
      window.localStorage.setItem(key, JSON.stringify(valueToStore));
    } catch (error) {
      console.error(`Error setting localStorage key "${key}":`, error);
    }
  }, [key, storedValue]);

  // Remove value from localStorage and reset to initial value
  const removeValue = useCallback(() => {
    try {
      window.localStorage.removeItem(key);
      setStoredValue(initialValue);
    } catch (error) {
      console.error(`Error removing localStorage key "${key}":`, error);
    }
  }, [key, initialValue]);

  return [storedValue, setValue, removeValue] as const;
};

/**
 * Hook for managing session storage
 */
export const useSessionStorage = <T>(key: string, initialValue: T) => {
  const [storedValue, setStoredValue] = useState<T>(() => {
    try {
      const item = window.sessionStorage.getItem(key);
      return item ? JSON.parse(item) : initialValue;
    } catch (error) {
      console.error(`Error reading sessionStorage key "${key}":`, error);
      return initialValue;
    }
  });

  const setValue = useCallback((value: T | ((val: T) => T)) => {
    try {
      const valueToStore = value instanceof Function ? value(storedValue) : value;
      setStoredValue(valueToStore);
      window.sessionStorage.setItem(key, JSON.stringify(valueToStore));
    } catch (error) {
      console.error(`Error setting sessionStorage key "${key}":`, error);
    }
  }, [key, storedValue]);

  return [storedValue, setValue] as const;
};
```

### ✅ Utility Hooks

```typescript
// ./src/hooks/useToggle.hooks.ts
import { useState, useCallback } from 'react';

/**
 * Hook for managing boolean toggle state
 */
export const useToggle = (initialValue: boolean = false) => {
  const [value, setValue] = useState(initialValue);

  const toggle = useCallback(() => {
    setValue(prev => !prev);
  }, []);

  const setTrue = useCallback(() => {
    setValue(true);
  }, []);

  const setFalse = useCallback(() => {
    setValue(false);
  }, []);

  return [value, toggle, setTrue, setFalse] as const;
};

/**
 * Hook for managing counter state
 */
export const useCounter = (initialValue: number = 0) => {
  const [count, setCount] = useState(initialValue);

  const increment = useCallback((step: number = 1) => {
    setCount(prev => prev + step);
  }, []);

  const decrement = useCallback((step: number = 1) => {
    setCount(prev => prev - step);
  }, []);

  const reset = useCallback(() => {
    setCount(initialValue);
  }, [initialValue]);

  const setValue = useCallback((value: number) => {
    setCount(value);
  }, []);

  return {
    count,
    increment,
    decrement,
    reset,
    setValue,
  };
};

/**
 * Hook for debouncing values
 */
export const useDebounce = <T>(value: T, delay: number): T => {
  const [debouncedValue, setDebouncedValue] = useState<T>(value);

  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);

    return () => {
      clearTimeout(handler);
    };
  }, [value, delay]);

  return debouncedValue;
};
```

### ✅ Component-Based Hooks

```typescript
// ./src/hooks/useToast.hooks.tsx
import { useState, useCallback } from 'react';
import { JSX } from 'react';
import { Check, X, AlertTriangle, Info } from 'lucide-react';

interface ToastMessage {
  id: string;
  type: 'success' | 'error' | 'warning' | 'info';
  message: string;
  duration?: number;
}

/**
 * Hook for managing toast notifications with React components
 */
export const useToast = () => {
  const [toasts, setToasts] = useState<ToastMessage[]>([]);

  const addToast = useCallback((
    type: ToastMessage['type'],
    message: string,
    duration: number = 4000
  ) => {
    const id = Math.random().toString(36).substr(2, 9);
    const toast: ToastMessage = { id, type, message, duration };

    setToasts(prev => [...prev, toast]);

    if (duration > 0) {
      setTimeout(() => {
        removeToast(id);
      }, duration);
    }

    return id;
  }, []);

  const removeToast = useCallback((id: string) => {
    setToasts(prev => prev.filter(toast => toast.id !== id));
  }, []);

  const showSuccess = useCallback((message: string, duration?: number) => {
    return addToast('success', message, duration);
  }, [addToast]);

  const showError = useCallback((message: string, duration?: number) => {
    return addToast('error', message, duration);
  }, [addToast]);

  const showWarning = useCallback((message: string, duration?: number) => {
    return addToast('warning', message, duration);
  }, [addToast]);

  const showInfo = useCallback((message: string, duration?: number) => {
    return addToast('info', message, duration);
  }, [addToast]);

  const clearAll = useCallback(() => {
    setToasts([]);
  }, []);

  // Toast component renderer
  const ToastContainer = useCallback((): JSX.Element => {
    const getIcon = (type: ToastMessage['type']) => {
      switch (type) {
        case 'success':
          return <Check className="text-green-500" size={20} />;
        case 'error':
          return <X className="text-red-500" size={20} />;
        case 'warning':
          return <AlertTriangle className="text-yellow-500" size={20} />;
        case 'info':
          return <Info className="text-blue-500" size={20} />;
      }
    };

    return (
      <div className="fixed top-4 right-4 z-50 space-y-2">
        {toasts.map(toast => (
          <div
            key={toast.id}
            className={`flex items-center gap-3 p-4 rounded-lg shadow-lg bg-white border-l-4 ${
              {
                success: 'border-green-500',
                error: 'border-red-500',
                warning: 'border-yellow-500',
                info: 'border-blue-500',
              }[toast.type]
            }`}
          >
            {getIcon(toast.type)}
            <span className="text-gray-800">{toast.message}</span>
            <button
              onClick={() => removeToast(toast.id)}
              className="ml-auto text-gray-400 hover:text-gray-600"
            >
              <X size={16} />
            </button>
          </div>
        ))}
      </div>
    );
  }, [toasts, removeToast]);

  return {
    toasts,
    showSuccess,
    showError,
    showWarning,
    showInfo,
    removeToast,
    clearAll,
    ToastContainer,
  };
};
```

### ✅ Form Management Hook

```typescript
// ./src/hooks/useForm.hooks.ts
import { useState, useCallback, useMemo } from 'react';

interface FormValidation<T> {
  [K in keyof T]?: (value: T[K]) => string | null;
}

interface UseFormOptions<T> {
  initialValues: T;
  validation?: FormValidation<T>;
  onSubmit?: (values: T) => void | Promise<void>;
}

/**
 * Hook for managing form state and validation
 */
export const useForm = <T extends Record<string, any>>({
  initialValues,
  validation = {},
  onSubmit,
}: UseFormOptions<T>) => {
  const [values, setValues] = useState<T>(initialValues);
  const [errors, setErrors] = useState<Partial<Record<keyof T, string>>>({});
  const [touched, setTouched] = useState<Partial<Record<keyof T, boolean>>>({});
  const [isSubmitting, setIsSubmitting] = useState(false);

  // Validate a single field
  const validateField = useCallback((name: keyof T, value: T[keyof T]) => {
    const validator = validation[name];
    if (validator) {
      return validator(value);
    }
    return null;
  }, [validation]);

  // Validate all fields
  const validateAll = useCallback(() => {
    const newErrors: Partial<Record<keyof T, string>> = {};
    let hasErrors = false;

    Object.keys(values).forEach(key => {
      const error = validateField(key as keyof T, values[key]);
      if (error) {
        newErrors[key as keyof T] = error;
        hasErrors = true;
      }
    });

    setErrors(newErrors);
    return !hasErrors;
  }, [values, validateField]);

  // Handle field value change
  const handleChange = useCallback((name: keyof T, value: T[keyof T]) => {
    setValues(prev => ({ ...prev, [name]: value }));

    // Clear error when user starts typing
    if (errors[name]) {
      setErrors(prev => ({ ...prev, [name]: undefined }));
    }
  }, [errors]);

  // Handle field blur
  const handleBlur = useCallback((name: keyof T) => {
    setTouched(prev => ({ ...prev, [name]: true }));

    // Validate field on blur
    const error = validateField(name, values[name]);
    setErrors(prev => ({ ...prev, [name]: error || undefined }));
  }, [validateField, values]);

  // Handle form submission
  const handleSubmit = useCallback(async (e?: React.FormEvent) => {
    e?.preventDefault();

    if (!validateAll()) {
      return;
    }

    setIsSubmitting(true);
    try {
      await onSubmit?.(values);
    } catch (error) {
      console.error('Form submission error:', error);
    } finally {
      setIsSubmitting(false);
    }
  }, [validateAll, onSubmit, values]);

  // Reset form to initial values
  const reset = useCallback(() => {
    setValues(initialValues);
    setErrors({});
    setTouched({});
    setIsSubmitting(false);
  }, [initialValues]);

  // Check if form is valid
  const isValid = useMemo(() => {
    return Object.keys(errors).length === 0;
  }, [errors]);

  // Check if form is dirty (has changes)
  const isDirty = useMemo(() => {
    return JSON.stringify(values) !== JSON.stringify(initialValues);
  }, [values, initialValues]);

  return {
    values,
    errors,
    touched,
    isSubmitting,
    isValid,
    isDirty,
    handleChange,
    handleBlur,
    handleSubmit,
    reset,
    setValues,
    setErrors,
  };
};
```

### ❌ Bad Hook Structure

```typescript
// Wrong: File naming and function naming
// ./src/hooks/auth.hooks.ts (should be more specific)

// Wrong: Not starting with 'use'
export const authHook = () => { // Wrong: should be useAuth
  const [user, setUser] = useState(null); // Wrong: no TypeScript typing
  
  // Wrong: no error handling
  const login = (email, password) => {
    fetch('/login'); // Wrong: no error handling, not async
  };
  
  return user; // Wrong: inconsistent return structure
};

// Wrong: PascalCase instead of camelCase
export const UseLocalStorage = () => {}; // Wrong: should be useLocalStorage

// Wrong: Snake case instead of camelCase
export const use_toggle_state = () => {}; // Wrong: should be useToggle
```

## Good vs Bad Practices

| Aspect | ✅ Good Practice | ❌ Bad Practice |
|-----|---|-----|
| **File Extension** | `.hooks.tsx` for JSX, `.hooks.ts` for logic | `.ts` for everything |
| **Function Naming** | `useAuth`, `useLocalStorage` | `authHook`, `UseAuth` |
| **Naming Convention** | `useFormValidation` (camelCase) | `use_form_validation` (snake_case) |
| **Return Structure** | Consistent object/array structure | Inconsistent returns |
| **Error Handling** | Try-catch blocks, error states | No error handling |
| **Type Safety** | Proper TypeScript types | `any` types everywhere |

## Hook Categories

| Category | File Name | Contains | Example Functions |
|-----|---|-----|-----|
| **Authentication** | `useAuth.hooks.ts` | User state, login/logout | `useAuth`, `usePermissions` |
| **Data Fetching** | `useApi.hooks.ts` | API calls, data management | `useApi`, `useApiPost` |
| **Storage** | `useLocalStorage.hooks.ts` | Browser storage | `useLocalStorage`, `useSessionStorage` |
| **State Utils** | `useToggle.hooks.ts` | State management utilities | `useToggle`, `useCounter` |
| **Form Utils** | `useForm.hooks.ts` | Form state and validation | `useForm`, `useFormValidation` |
| **Component Utils** | `useToast.hooks.tsx` | Component-based utilities | `useToast`, `useModal` |

## Usage in Components

### ✅ Good Hook Usage

```typescript
// ./src/components/LoginForm.tsx
import React from 'react';
import { useAuth } from '@/hooks/useAuth.hooks';
import { useForm } from '@/hooks/useForm.hooks';
import { useToast } from '@/hooks/useToast.hooks';

const LoginForm: React.FC = () => {
  const { login, isLoading } = useAuth();
  const { showSuccess, showError, ToastContainer } = useToast();

  const { values, errors, handleChange, handleSubmit } = useForm({
    initialValues: { email: '', password: '' },
    validation: {
      email: (value) => !value ? 'Email is required' : null,
      password: (value) => !value ? 'Password is required' : null,
    },
    onSubmit: async (values) => {
      try {
        await login(values.email, values.password);
        showSuccess('Login successful!');
      } catch (error) {
        showError('Login failed. Please try again.');
      }
    },
  });

  return (
    <div>
      <form onSubmit={handleSubmit}>
        <input
          type="email"
          value={values.email}
          onChange={(e) => handleChange('email', e.target.value)}
          placeholder="Email"
        />
        {errors.email && <span className="error">{errors.email}</span>}

        <input
          type="password"
          value={values.password}
          onChange={(e) => handleChange('password', e.target.value)}
          placeholder="Password"
        />
        {errors.password && <span className="error">{errors.password}</span>}

        <button type="submit" disabled={isLoading}>
          {isLoading ? 'Logging in...' : 'Login'}
        </button>
      </form>

      <ToastContainer />
    </div>
  );
};

export { LoginForm };
```

## Implementation Checklist

### Before Creating Hooks
- [ ] Determine if hook needs JSX components (.tsx) or pure logic (.ts)
- [ ] Plan the hook's responsibility and return structure
- [ ] Consider reusability and parameter flexibility
- [ ] Identify state management and side effect needs

### While Creating Hooks
- [ ] Use correct file extension (.hooks.ts or .hooks.tsx)
- [ ] Place file in `./src/hooks/` directory
- [ ] Start function name with `use` prefix
- [ ] Use camelCase for function naming
- [ ] Add proper TypeScript typing
- [ ] Include JSDoc comments for complex hooks
- [ ] Handle errors gracefully
- [ ] Follow React hooks rules

### After Creating Hooks
- [ ] Import hooks using `@/hooks/filename.hooks` pattern
- [ ] Test hooks in components
- [ ] Verify TypeScript compilation passes
- [ ] Ensure hooks follow React rules
- [ ] Update related components to use hooks

### Hook Organization Checks
- [ ] Hook file is in correct directory
- [ ] File extension matches content type
- [ ] Function names start with `use` prefix
- [ ] CamelCase naming convention used
- [ ] Proper React hooks patterns followed
- [ ] Consistent return structures used

## References

- [React Hooks Documentation](mdc:https:/react.dev/reference/react)
- [Rules of Hooks](mdc:https:/react.dev/warnings/invalid-hook-call-warning)
- [Custom Hooks Guide](mdc:https:/react.dev/learn/reusing-logic-with-custom-hooks)
- [TypeScript with React Hooks](mdc:https:/react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/hooks)

## Reminders

### ⚡ Key Hook Rules to Remember

1. **File Extension**: Use `.hooks.tsx` for JSX, `.hooks.ts` for pure logic
2. **Location**: All custom hooks go in `./src/hooks/` directory
3. **Naming**: Always prefix with `use` and use camelCase
4. **React Rules**: Only call hooks at top level, only from React functions
5. **Type Safety**: Use proper TypeScript types for parameters and returns
6. **Error Handling**: Handle errors gracefully with try-catch blocks
7. **Dependencies**: Use proper dependency arrays in useEffect
8. **Cleanup**: Clean up effects, timers, and subscriptions
9. **Consistency**: Return consistent structures from similar hooks
10. **Import Pattern**: Use `@/hooks/filename.hooks` for imports

### 🎯 Hook Quality Indicators

- Do hook files have the correct extension for their content?
- Do all hook functions start with `use` prefix?
- Are hooks following React hooks rules?
- Is error handling implemented properly?
- Are TypeScript types used consistently?

### 📋 Hook Creation Checklist

- [ ] File name follows `hookName.hooks.ts/tsx` pattern
- [ ] File located in `./src/hooks/` directory
- [ ] Function name starts with `use` prefix
- [ ] Function name uses camelCase convention
- [ ] Correct file extension for content type
- [ ] Proper TypeScript typing applied
- [ ] React hooks rules followed
- [ ] Error handling implemented
- [ ] JSDoc comments added for complex hooks
- [ ] Import using `@/hooks/filename.hooks` pattern
